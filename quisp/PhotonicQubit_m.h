//
// Generated file, do not edit! Created by nedtool 5.2 from PhotonicQubit.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __PHOTONICQUBIT_M_H
#define __PHOTONICQUBIT_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>PhotonicQubit.msg:18</tt> by nedtool.
 * <pre>
 * message PhotonicQubit
 * {
 *     string message_type = "qubit";
 *     //int SrcAddr = -1;
 *     //int DestAddr = -1;
 *     bool pauliXerr = false;
 *     bool pauliZerr = false;
 *     bool photonLost = false;
 *     bool nonPaulierr = false;
 *     bool nonPaulierrTwo = false;
 *     int NodeEntangledWith = -1;//Which node it is entangled with. -1 if not entangled. Equivalent to SrcAddress.
 *     int QNICEntangledWith = -1;//Which QNIC it is entangled with
 *     int StationaryQubitEntangledWith = -1;//Which buffer it is entangled with
 *     //EntangledWith entangledWith;
 *     double error_random_for_debug;
 *     bool first = false;
 *     bool last = false;
 * }
 * </pre>
 */
class PhotonicQubit : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::opp_string message_type;
    bool pauliXerr;
    bool pauliZerr;
    bool photonLost;
    bool nonPaulierr;
    bool nonPaulierrTwo;
    int NodeEntangledWith;
    int QNICEntangledWith;
    int StationaryQubitEntangledWith;
    double error_random_for_debug;
    bool first;
    bool last;

  private:
    void copy(const PhotonicQubit& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PhotonicQubit&);

  public:
    PhotonicQubit(const char *name=nullptr, short kind=0);
    PhotonicQubit(const PhotonicQubit& other);
    virtual ~PhotonicQubit();
    PhotonicQubit& operator=(const PhotonicQubit& other);
    virtual PhotonicQubit *dup() const override {return new PhotonicQubit(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getMessage_type() const;
    virtual void setMessage_type(const char * message_type);
    virtual bool getPauliXerr() const;
    virtual void setPauliXerr(bool pauliXerr);
    virtual bool getPauliZerr() const;
    virtual void setPauliZerr(bool pauliZerr);
    virtual bool getPhotonLost() const;
    virtual void setPhotonLost(bool photonLost);
    virtual bool getNonPaulierr() const;
    virtual void setNonPaulierr(bool nonPaulierr);
    virtual bool getNonPaulierrTwo() const;
    virtual void setNonPaulierrTwo(bool nonPaulierrTwo);
    virtual int getNodeEntangledWith() const;
    virtual void setNodeEntangledWith(int NodeEntangledWith);
    virtual int getQNICEntangledWith() const;
    virtual void setQNICEntangledWith(int QNICEntangledWith);
    virtual int getStationaryQubitEntangledWith() const;
    virtual void setStationaryQubitEntangledWith(int StationaryQubitEntangledWith);
    virtual double getError_random_for_debug() const;
    virtual void setError_random_for_debug(double error_random_for_debug);
    virtual bool getFirst() const;
    virtual void setFirst(bool first);
    virtual bool getLast() const;
    virtual void setLast(bool last);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PhotonicQubit& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PhotonicQubit& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PHOTONICQUBIT_M_H

